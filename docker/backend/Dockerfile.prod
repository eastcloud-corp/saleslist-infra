# Build stage
FROM python:3.11-slim as builder

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY saleslist-backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies for production
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && groupadd -r django \
    && useradd -r -g django django

# Copy installed packages from builder stage
COPY --from=builder /usr/local /usr/local

# Copy application code
COPY saleslist-backend/ .

# Copy entrypoint script
COPY saleslist-infra/docker/backend/docker-entrypoint.sh /docker-entrypoint.sh

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DJANGO_SETTINGS_MODULE=saleslist_backend.settings

# Create static and media directories and set permissions
RUN mkdir -p /app/static /app/media /home/django \
    && chown -R django:django /app /home/django /docker-entrypoint.sh \
    && chmod +x /docker-entrypoint.sh

# Run as root for file permissions
# USER django

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python manage.py check --database default || exit 1

# Use entrypoint script
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "300", "--graceful-timeout", "300", "saleslist_backend.wsgi:application"]
