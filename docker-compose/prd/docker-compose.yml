services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: saleslist_db_prd
    environment:
      POSTGRES_DB: saleslist_production
      POSTGRES_USER: saleslist_prod_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ja_JP.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prd:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saleslist_prod_user -d saleslist_production"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saleslist_redis_prd
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prd:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: /opt/salesnav
      dockerfile: saleslist-infra/docker/backend/Dockerfile.prod
    container_name: saleslist_backend_prd
    environment:
      DJANGO_SETTINGS_MODULE: saleslist_backend.settings_production
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: ${DEBUG}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      REDIS_URL: ${REDIS_URL}
    ports:
      - "8000:8000"
    volumes:
      - backend_static_prd:/app/static
      - backend_media_prd:/app/media
      - /var/log/salesnav/backend:/app/logs:rw
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/admin/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: /opt/salesnav
      dockerfile: saleslist-infra/docker/frontend/Dockerfile.prod
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: saleslist_frontend_prd
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    ports:
      - "3000:3000"
    volumes:
      - /var/log/salesnav/frontend:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data_prd:
  redis_data_prd:
  backend_static_prd:
  backend_media_prd:
  backend_logs_prd:
  frontend_logs_prd:

networks:
  default:
    name: saleslist_production_network