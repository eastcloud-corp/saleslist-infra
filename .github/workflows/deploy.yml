name: Deploy to Sakura Cloud App Run

on:
  push:
    branches:
      - develop     # Staging deployment
      - main        # Production deployment (initial setup)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  SAKURA_ACCESS_TOKEN: ${{ secrets.SAKURA_ACCESS_TOKEN }}
  SAKURA_ACCESS_TOKEN_SECRET: ${{ secrets.SAKURA_ACCESS_TOKEN_SECRET }}

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: determine-environment
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout saleslist-infra
        uses: actions/checkout@v4

      - name: Checkout saleslist-backend
        uses: actions/checkout@v4
        with:
          repository: eastcloud-corp/saleslist-backend
          path: saleslist-backend
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout saleslist-front
        uses: actions/checkout@v4
        with:
          repository: eastcloud-corp/saleslist-front
          path: saleslist-front
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/${{ matrix.service }}/Dockerfile.prod
          push: true
          tags: |
            ${{ env.REGISTRY }}/eastcloud-corp/saleslist-${{ matrix.service }}:${{ needs.determine-environment.outputs.environment }}
            ${{ env.REGISTRY }}/eastcloud-corp/saleslist-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Configure Sakura Cloud credentials
        run: |
          echo "SAKURACLOUD_ACCESS_TOKEN=${{ env.SAKURA_ACCESS_TOKEN }}" >> $GITHUB_ENV
          echo "SAKURACLOUD_ACCESS_TOKEN_SECRET=${{ env.SAKURA_ACCESS_TOKEN_SECRET }}" >> $GITHUB_ENV

      - name: Debug directory structure
        run: |
          pwd
          ls -la
          find . -name "terraform" -type d

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/${{ needs.determine-environment.outputs.environment }}.tfvars" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
            -var="image_tag=${{ github.sha }}"

      - name: Terraform Apply
        working-directory: terraform
        run: |
          terraform apply \
            -var-file="environments/${{ needs.determine-environment.outputs.environment }}.tfvars" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="django_secret_key=${{ secrets.DJANGO_SECRET_KEY }}" \
            -var="image_tag=${{ github.sha }}" \
            -var="github_organization=${{ github.repository_owner }}" \
            -auto-approve

      - name: Run health checks
        working-directory: scripts
        run: |
          chmod +x health-check.sh
          ./health-check.sh ${{ needs.determine-environment.outputs.environment }}

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          exit 1