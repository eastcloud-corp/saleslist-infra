name: Deploy to VPS

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NEXT_PUBLIC_API_URL: https://sales-navigator.east-cloud.jp

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 セールスナビゲーター自動デプロイ開始"
            
            # Update repositories (with sudo)
            sudo mkdir -p /opt/salesnav
            cd /opt/salesnav
            sudo git clone https://github.com/eastcloud-corp/saleslist-backend.git || (cd saleslist-backend && sudo git pull)
            sudo git clone https://github.com/eastcloud-corp/saleslist-front.git || (cd saleslist-front && sudo git pull)
            sudo git clone https://github.com/eastcloud-corp/saleslist-infra.git || (cd saleslist-infra && sudo git pull)
            
            # Setup environment variables
            cd /opt/salesnav/saleslist-infra/docker-compose/prd
            sudo tee .env << EOF
            DB_HOST="db"
            DB_PORT="5432"
            DB_NAME="saleslist_production"
            DB_USER="saleslist_prod_user"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
            DEBUG="False"
            ALLOWED_HOSTS="sales-navigator.east-cloud.jp,153.120.128.27,localhost"
            CORS_ALLOWED_ORIGINS="https://sales-navigator.east-cloud.jp"
            NEXT_PUBLIC_API_URL="${{ env.NEXT_PUBLIC_API_URL }}"
            REDIS_URL="redis://redis:6379/1"
            EOF
            
            # Debug: 環境変数確認
            echo "🔍 GitHub Actions環境変数:"
            echo "NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}"
            echo "🔍 .envファイル内容:"
            grep NEXT_PUBLIC_API_URL .env
            echo "🔍 Docker build時の環境変数:"
            echo "NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}"
            
            # Initial setup (only run if needed)
            if [ ! -f "/etc/nginx/sites-enabled/default" ]; then
              echo "🔧 初回セットアップ実行"
              
              # Install Nginx and Certbot
              sudo apt install -y nginx certbot python3-certbot-nginx
              
              # Setup Nginx configuration
              sudo tee /etc/nginx/sites-enabled/default << 'NGINX_EOF'
            server {
                listen 80;
                listen 443 ssl;
                server_name sales-navigator.east-cloud.jp;
                
                ssl_certificate /etc/letsencrypt/live/sales-navigator.east-cloud.jp/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/sales-navigator.east-cloud.jp/privkey.pem;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /api/ {
                    proxy_pass http://localhost:8000/api/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /admin/ {
                    proxy_pass http://localhost:8000/admin/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /static/ {
                    proxy_pass http://localhost:8000/static/;
                }
                
                location /media/ {
                    proxy_pass http://localhost:8000/media/;
                }
            }
            NGINX_EOF
              
              # Get SSL certificate
              sudo systemctl start nginx
              sudo certbot --nginx -d sales-navigator.east-cloud.jp --non-interactive --agree-tos --email admin@budget-sales.com || true
              
              # Setup log structure
              sudo bash /opt/salesnav/saleslist-infra/scripts/setup-log-structure.sh
              
              # Setup cron jobs
              sudo bash /opt/salesnav/saleslist-infra/scripts/setup-ssl-cron.sh
              
              echo "✅ 初回セットアップ完了"
            else
              echo "⚡ 既存環境での更新デプロイ"
            fi
            
            # Pre-deployment backup (if DB exists)
            if sudo docker compose ps | grep -q "saleslist_db_prd.*healthy"; then
              echo "🗄️ デプロイ前DBバックアップ実行"
              sudo bash /opt/salesnav/saleslist-infra/scripts/backup-db.sh
            fi
            
            # Setup and start containers
            sudo docker compose down || true
            sudo docker system prune -f
            sudo docker compose build --no-cache
            sudo docker compose up -d
            
            # Force restart backend to reload URL changes
            sudo docker compose restart backend
            
            # Wait for services to start
            sleep 60
            
            # Health check with error handling
            if sudo docker compose ps | grep -q "Up"; then
              echo "✅ Services started"
              sudo docker compose logs --tail=5
            else
              echo "❌ Services failed"
              sudo docker compose logs
              exit 1
            fi
            
            echo "✅ デプロイ完了"
            echo "🌐 アクセス: http://153.120.128.27"