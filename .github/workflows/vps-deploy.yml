name: Deploy to VPS

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NEXT_PUBLIC_API_URL: https://sales-navigator.east-cloud.jp
  NEXT_PUBLIC_ENVIRONMENT: prd
  CLEAN_DOCKER_CACHE: "false"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}
          command_timeout: 30m
          script: |
            echo "üöÄ „Çª„Éº„É´„Çπ„Éä„Éì„Ç≤„Éº„Çø„ÉºËá™Âãï„Éá„Éó„É≠„Ç§ÈñãÂßã"
            
            # Update repositories (with sudo) and force latest
            sudo mkdir -p /opt/salesnav
            cd /opt/salesnav
            
            # Force clean and fresh clone
            sudo rm -rf saleslist-backend saleslist-front saleslist-infra || true
            sudo git clone https://github.com/eastcloud-corp/saleslist-backend.git
            sudo git clone https://github.com/eastcloud-corp/saleslist-front.git  
            sudo git clone https://github.com/eastcloud-corp/saleslist-infra.git
            
            # Setup environment variables
            cd /opt/salesnav/saleslist-infra/docker-compose/prd
            sudo tee .env << EOF
            DB_HOST="db"
            DB_PORT="5432"
            DB_NAME="saleslist_production"
            DB_USER="saleslist_prod_user"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            DJANGO_SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}"
            DEBUG="False"
            ALLOWED_HOSTS="sales-navigator.east-cloud.jp,153.120.128.27,localhost"
            CORS_ALLOWED_ORIGINS="https://sales-navigator.east-cloud.jp"
            NEXT_PUBLIC_API_URL="${{ env.NEXT_PUBLIC_API_URL }}"
            NEXT_PUBLIC_ENVIRONMENT="${{ env.NEXT_PUBLIC_ENVIRONMENT }}"
            REDIS_URL="redis://redis:6379/1"
            EOF
            
            # Debug: Áí∞Â¢ÉÂ§âÊï∞Á¢∫Ë™ç
            echo "üîç GitHub ActionsÁí∞Â¢ÉÂ§âÊï∞:"
            echo "NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}"
            echo "üîç .env„Éï„Ç°„Ç§„É´ÂÜÖÂÆπ:"
            grep NEXT_PUBLIC_API_URL .env
            echo "üîç Docker buildÊôÇ„ÅÆÁí∞Â¢ÉÂ§âÊï∞:"
            echo "NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}"
            echo "NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT}"
            
            # Initial setup (only run if needed)
            if [ ! -f "/etc/nginx/sites-enabled/default" ]; then
              echo "üîß ÂàùÂõû„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆüË°å"
              
              # Install Nginx and Certbot
              sudo apt install -y nginx certbot python3-certbot-nginx
              
              # Setup Nginx configuration
              sudo tee /etc/nginx/sites-enabled/default << 'NGINX_EOF'
            server {
                listen 80;
                listen 443 ssl;
                server_name sales-navigator.east-cloud.jp;
                
                ssl_certificate /etc/letsencrypt/live/sales-navigator.east-cloud.jp/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/sales-navigator.east-cloud.jp/privkey.pem;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /api/ {
                    proxy_pass http://localhost:8000/api/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /admin/ {
                    proxy_pass http://localhost:8000/admin/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                }
                
                location /static/ {
                    proxy_pass http://localhost:8000/static/;
                }
                
                location /media/ {
                    proxy_pass http://localhost:8000/media/;
                }
            }
            NGINX_EOF
              
              # Get SSL certificate
              sudo systemctl start nginx
              sudo certbot --nginx -d sales-navigator.east-cloud.jp --non-interactive --agree-tos --email admin@budget-sales.com || true
              
              # Setup log structure
              sudo bash /opt/salesnav/saleslist-infra/scripts/setup-log-structure.sh
              
              # Setup cron jobs
              sudo bash /opt/salesnav/saleslist-infra/scripts/setup-ssl-cron.sh
              
              echo "‚úÖ ÂàùÂõû„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü"
            else
              echo "‚ö° Êó¢Â≠òÁí∞Â¢É„Åß„ÅÆÊõ¥Êñ∞„Éá„Éó„É≠„Ç§"
            fi
            
            # Pre-deployment backup (if DB exists)
            if sudo docker compose ps | grep -q "saleslist_db_prd.*healthy"; then
              echo "üóÑÔ∏è „Éá„Éó„É≠„Ç§ÂâçDB„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆüË°å"
              sudo bash /opt/salesnav/saleslist-infra/scripts/backup-db.sh
            fi
            
            # Setup and start containers
            sudo docker compose down || true
            
            CLEAN_CACHE="${{ env.CLEAN_DOCKER_CACHE }}"
            if [ "$CLEAN_CACHE" = "true" ]; then
              echo "üóëÔ∏è Force cleaning all Docker cache..."
              sudo docker compose down --remove-orphans || true
              sudo docker system prune -af --volumes || true
              sudo docker builder prune -af || true
              sudo docker image prune -af || true
            else
              echo "üßπ Docker„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÂÆåÂÖ®ÂâäÈô§„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô (CLEAN_DOCKER_CACHE=true „ÅßÊúâÂäπÂåñ)"
            fi
            
            # Force remove any existing images
            sudo docker images | grep saleslist | awk '{print $3}' | xargs -r sudo docker rmi -f || true
            
            # Build with explicit environment and no cache
            echo "üî® Building fresh images..."
            export NEXT_PUBLIC_API_URL="${{ env.NEXT_PUBLIC_API_URL }}"
            export NEXT_PUBLIC_ENVIRONMENT="${{ env.NEXT_PUBLIC_ENVIRONMENT }}"
            echo "Environment: NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL"
            echo "Environment: NEXT_PUBLIC_ENVIRONMENT=$NEXT_PUBLIC_ENVIRONMENT"
            
            sudo -E docker compose build --no-cache --pull --force-rm
            
            # Start services with detailed logging
            echo "üöÄ Starting services..."
            sudo docker compose up -d
            
            # Check initial startup
            echo "üîç Initial service status:"
            sudo docker compose ps
            
            # Active health check instead of blind waiting
            echo "‚è±Ô∏è Waiting for services to become ready..."
            for i in {1..30}; do
                if curl -s http://localhost:8000/admin/ > /dev/null && curl -s http://localhost:3000/ > /dev/null; then
                    echo "‚úÖ Services are ready after ${i}0 seconds"
                    break
                fi
                echo "‚è≥ Attempt $i/30 - Services not ready yet..."
                sleep 10
            done
            
            # Check for build/startup errors
            echo "üîç Checking for startup errors:"
            sudo docker compose logs --tail=20
            
            # Force restart both services to ensure fresh deployment  
            echo "‚ôªÔ∏è Restarting services for fresh deployment..."
            sudo docker compose restart backend
            sudo docker compose restart frontend
            
            # Active wait for restart completion
            echo "‚è±Ô∏è Waiting for restart completion..."
            for i in {1..18}; do
                if curl -s http://localhost:8000/admin/ > /dev/null && curl -s http://localhost:3000/ > /dev/null; then
                    echo "‚úÖ Restart completed after ${i}0 seconds"
                    break
                fi
                echo "‚è≥ Restart attempt $i/18..."
                sleep 10
            done
            
            # Force master data initialization
            echo "üóÑÔ∏è Ensuring master data is loaded..."
            sudo docker compose exec -T backend python manage.py shell -c "
            from masters.models import *
            print('Current master data counts:')
            print(f'ProjectProgressStatus: {ProjectProgressStatus.objects.count()}')
            print(f'MediaType: {MediaType.objects.count()}')
            print(f'ServiceType: {ServiceType.objects.count()}')
            print(f'RegularMeetingStatus: {RegularMeetingStatus.objects.count()}')
            print(f'ListAvailability: {ListAvailability.objects.count()}')
            print(f'ListImportSource: {ListImportSource.objects.count()}')
            " || echo "Master data check failed"
            
            # Enhanced health check and validation
            echo "üîç „Éá„Éó„É≠„Ç§ÂæåÊ§úË®ºÈñãÂßã"
            
            # Service status check
            if sudo docker compose ps | grep -q "Up"; then
              echo "‚úÖ Services started"
              
              # Check each service individually
              echo "üîç Backend service check:"
              curl -s -I http://localhost:8000/admin/ | head -1 || echo "Backend not responding"
              
              echo "üîç Frontend service check:" 
              curl -s -I http://localhost:3000/ | head -1 || echo "Frontend not responding"
              
              # Verify environment variables in containers
              echo "üîç Frontend environment validation:"
              sudo docker compose exec -T frontend printenv | grep NEXT_PUBLIC_API_URL || echo "NEXT_PUBLIC_API_URL missing"
              sudo docker compose exec -T frontend printenv | grep NEXT_PUBLIC_ENVIRONMENT || echo "NEXT_PUBLIC_ENVIRONMENT missing"
              
              # Show recent logs for debugging
              echo "üìÑ Recent backend logs:"
              sudo docker compose logs backend --tail=10
              echo "üìÑ Recent frontend logs:"
              sudo docker compose logs frontend --tail=10
              
              echo "‚úÖ „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü"
              echo "üåê Êú¨Áï™URL: https://sales-navigator.east-cloud.jp" 
              echo "üåê IPÁõ¥Êé•„Ç¢„ÇØ„Çª„Çπ: http://153.120.128.27"
              
            else
              echo "‚ùå Services failed to start"
              sudo docker compose ps
              sudo docker compose logs
              exit 1
            fi
